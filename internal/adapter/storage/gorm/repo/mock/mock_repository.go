// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../../adapter/storage/gorm/repo/mock/mock_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/khivuksergey/portmonetka.wallet/internal/adapter/storage/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletRepository) CreateWallet(wallet *entity.Wallet) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", wallet)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepositoryMockRecorder) CreateWallet(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepository)(nil).CreateWallet), wallet)
}

// DeleteWallet mocks base method.
func (m *MockWalletRepository) DeleteWallet(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockWalletRepositoryMockRecorder) DeleteWallet(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockWalletRepository)(nil).DeleteWallet), id)
}

// ExistsWithName mocks base method.
func (m *MockWalletRepository) ExistsWithName(userId uint64, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsWithName", userId, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsWithName indicates an expected call of ExistsWithName.
func (mr *MockWalletRepositoryMockRecorder) ExistsWithName(userId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsWithName", reflect.TypeOf((*MockWalletRepository)(nil).ExistsWithName), userId, name)
}

// GetWalletById mocks base method.
func (m *MockWalletRepository) GetWalletById(id uint64) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletById", id)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletById indicates an expected call of GetWalletById.
func (mr *MockWalletRepositoryMockRecorder) GetWalletById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletById", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletById), id)
}

// GetWalletsByUserId mocks base method.
func (m *MockWalletRepository) GetWalletsByUserId(userId uint64) ([]entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsByUserId", userId)
	ret0, _ := ret[0].([]entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsByUserId indicates an expected call of GetWalletsByUserId.
func (mr *MockWalletRepositoryMockRecorder) GetWalletsByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsByUserId", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletsByUserId), userId)
}

// UpdateWallet mocks base method.
func (m *MockWalletRepository) UpdateWallet(wallet *entity.Wallet) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", wallet)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletRepositoryMockRecorder) UpdateWallet(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletRepository)(nil).UpdateWallet), wallet)
}

// WalletBelongsToUser mocks base method.
func (m *MockWalletRepository) WalletBelongsToUser(id, userId uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletBelongsToUser", id, userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WalletBelongsToUser indicates an expected call of WalletBelongsToUser.
func (mr *MockWalletRepositoryMockRecorder) WalletBelongsToUser(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletBelongsToUser", reflect.TypeOf((*MockWalletRepository)(nil).WalletBelongsToUser), id, userId)
}
